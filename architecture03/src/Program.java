import java.awt.*;

public class Program {

    /**
     *  1. Спроектировать абстрактный класс "Car" у которого должны
     *  быть свойства: марка, модель, цвет, тип кузова, число колёс, тип
     *  топлива, тип коробки передач, объём двигателя; методы:
     *  движени, обслуживание, переключение передач, включение
     *  фар, включение дворников.
     *
     *  2. Создать конкретный автомобиль путём наследования класса
     *  "Car".
     *  3. Расширить абстрактный класс "Car", добавить метод: подметать
     *  улицу. Создать конкретный автомобиль путём наследования
     *  класса "Car". Провести проверку принципа SRP.
     *
     *  4. Расширить абстрактный класс "Car", добавить метод:
     *  включение противотуманных фар, перевозка груза. Провести
     *  проверку принципа OCP.
     *
     *  5. Создать конкретный автомобиль путём наследования класса
     * "Car", определить число колёс = 3. Провести проверку принципа LSP.
     *
     *  6. Создать конкретный автомобиль путём наследования класса
     *  "Car", определить метод "движение" - "полёт". Провести
     *  проверку принципа LTP.
     *
     * 7. Создать интерфейс "заправочная станция", создать метод:
     * заправка топливом.
     *
     * 8. Имплеминитровать метод интерфейса "Заправочная станция" в
     * конкретный класс "Car".
     *
     * 9. Добавить в интерфейс "Заправочная станция" методы: Протирка
     * лобового стекла, протирка фар, протирка зеркал.
     *
     * 10. Имплеминтировать все методы интерфейса "Заправочная
     * станция" в конкретный класс "Car". Провести проверку принципа
     * принципа ISP. Создать дополнительный/е интерфейсы и
     * имплеминтировать их в конкретный класс "Car". Провести
     * проверку принципа ISP.
     *
     * 11. Создать путём наследования класса "Car" два
     * автомобиля: с бензиновым и дизельным двигателями,
     * имплеминтировать метод "Заправка топливом" интерфейса
     * "Заправочная станция". Реализовать заправку каждого
     * автомобиля подходящим топливом. Провести проверку принципа DIP.
     *
     * @param args
     */

    public static void main(String[] args) {
        Harvester harvester = new Harvester("A", "B", Color.BLACK);

        RefuelingStation refuelingStation = new RefuelingStation();

        WipingStation wipingStation = new WipingStation();

        harvester.setRefuelingStation(refuelingStation);

        harvester.fuel();

        harvester.setRewiping(wipingStation);

        harvester.isClearType();

        harvester.wipMirrors();

        harvester.isClearType();

    }

    public static double calculateMaintenance(Car car) {
        if (car.getWheelsCount() == 6) {
            return 1500 * 6;
        } else {
            return 1000 * car.getWheelsCount();
        }
    }
}
